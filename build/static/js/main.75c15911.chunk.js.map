{"version":3,"sources":["assets/Your-Weather.svg","components/WeatherInput/WeatherInput.js","components/WindDirection/WindDirection.js","components/WeatherOutput/WeatherOutput.js","components/WeatherIcon/WeatherIcon.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherInput","props","_useState","useState","_useState2","_slicedToArray","cityName","cityNameHandler","_jsx","_Fragment","children","_jsxs","Form","Group","Label","Control","type","placeholder","value","onChange","event","target","Button","variant","onClick","btnclick","WindDirection","direction","className","style","fontSize","speed","WeatherOutput","width","weather","main","temp","name","sys","country","feels_like","wind","deg","humidity","parseInt","visibility","pressure","Date","sunrise","toLocaleTimeString","sunset","WeatherIcon","theicon","isitnight","weathercond","color","App","weatherHandler","_useState3","_useState4","error","errorHandler","weather_out","weather_icon_out","dt","id","src","yourWeatherLogo","alt","ele","Axios","get","process","REACT_APP_OPEN_WEATHER_KEY","then","response","data","window","location","assign","catch","onLoading","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75c15911.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Your-Weather.43d9964e.svg\";","import React, { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\n\nconst WeatherInput = (props) => {\n  const [cityName, cityNameHandler] = useState('');\n  const onClickHandler = () => {\n    props.btnclick(cityName);\n  };\n\n  return (\n    <>\n      <Form>\n        <Form.Group>\n          <Form.Label>City Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter City Name\"\n            value={cityName}\n            onChange={(event) => cityNameHandler(event.target.value)}\n          />\n        </Form.Group>\n\n        <Button variant=\"primary\" onClick={onClickHandler}>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default WeatherInput;\n","import React from \"react\";\nimport \"../../assets/css/weather-icons.min.css\";\nimport \"../../assets/css/weather-icons-wind.min.css\";\n\nconst WindDirection = (props) => {\n  const direction = \"wi wi-wind towards-\" + props.direction + \"-deg\";\n  return (\n    <div>\n      <i className={direction} style={{ fontSize: \"1.2rem\" }}></i>&ensp;Wind\n      Speed : {props.speed} m/s\n    </div>\n  );\n};\n\nexport default WindDirection;\n","import React from \"react\";\nimport WindDirection from \"../WindDirection/WindDirection\";\n\nconst WeatherOutput = (props) => {\n  return (\n    <div className=\"card mb-3\" style={{ width: \"18rem\" }}>\n      <div className=\"card-body\">\n        <h5 className=\"card-title\" style={{ fontSize: \"2rem\"}}>\n          {props.weather.main.temp}\n          &nbsp;<i className=\"wi wi-celsius\"></i>\n          <br></br>\n          {props.weather.name}, {props.weather.sys.country}\n        </h5>\n        <p className=\"card-text\">\n          Feels like &nbsp;\n          {props.weather.main.feels_like} Â°C.&nbsp;\n          {props.weather.weather[0].main}.\n        </p>\n      </div>\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          <WindDirection\n            speed={props.weather.wind.speed}\n            direction={props.weather.wind.deg}\n          ></WindDirection>\n        </li>\n        <li className=\"list-group-item\">\n          <i className=\"wi wi-humidity\"></i>&nbsp; Humidity :{\" \"}\n          {props.weather.main.humidity}%\n        </li>\n        <li className=\"list-group-item\">\n          Visibility : {parseInt(props.weather.visibility) / 1000} Km\n        </li>\n        <li className=\"list-group-item\">\n          Pressure : {props.weather.main.pressure}hPa\n        </li>\n        <li className=\"list-group-item\">\n          <i className=\"wi wi-sunrise\"></i>&nbsp;{\" \"}\n          {new Date(props.weather.sys.sunrise * 1000).toLocaleTimeString()}\n          &emsp; | &emsp;\n          <i className=\"wi wi-sunset\"></i>\n          &nbsp;{new Date(props.weather.sys.sunset * 1000).toLocaleTimeString()}\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default WeatherOutput;\n","import React from \"react\";\n\nconst WeatherIcon = (props) => {\n  const theicon =\n    \"wi wi-owm-\" +\n    (props.isitnight ? \"night\" : \"day\") +\n    \"-\" +\n    props.weathercond +\n    \" mt-3\";\n  return (\n    <div>\n      <i className={theicon} style={{ fontSize: \"8rem\", color: props.isitnight===\"night\" ? \"black\" : \"white\" }}></i>\n    </div>\n  );\n};\n\nexport default WeatherIcon;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Axios from 'axios';\nimport yourWeatherLogo from './assets/Your-Weather.svg';\nimport './assets/css/weather-icons.min.css';\nimport WeatherInput from './components/WeatherInput/WeatherInput';\nimport WeatherOutput from './components/WeatherOutput/WeatherOutput';\nimport WeatherIcon from './components/WeatherIcon/WeatherIcon';\n\nconst App = (props) => {\n  const [weather, weatherHandler] = useState(null);\n  const [error, errorHandler] = useState(null);\n\n  const onLoading = (ele) => {\n    Axios.get(\n      'https://api.openweathermap.org/data/2.5/weather?q=' +\n        ele +\n        '&appid=' +\n        process.env.REACT_APP_OPEN_WEATHER_KEY +\n        '&units=metric'\n    )\n      .then((response) => {\n        errorHandler(null);\n        weatherHandler(response.data);\n        window.location.assign('#2');\n      })\n      .catch((response) => {\n        errorHandler('404');\n        window.location.assign('#2');\n      });\n  };\n\n  let weather_out = '';\n  let weather_icon_out = '';\n\n  if (weather && !error) {\n    weather_icon_out = (\n      <WeatherIcon\n        isitnight={\n          weather.sys.sunset < weather.dt || weather.sys.sunrise > weather.dt\n            ? true\n            : false\n        }\n        weathercond={weather.weather[0].id}\n      ></WeatherIcon>\n    );\n  } else if (error) {\n    weather_icon_out = <p>No Data = No Image</p>;\n  }\n\n  if (weather && !error) {\n    weather_out = <WeatherOutput weather={weather}></WeatherOutput>;\n  } else if (error) {\n    weather_out = <p>Do you even know how to spell the city's name ?</p>;\n  }\n\n  return (\n    <div>\n      <div className=\"section container text-center\" id=\"1\">\n        <div className=\"row\">\n          <div className=\"col-sm-6 p-5\">\n            <img src={yourWeatherLogo} alt=\"Rain\" className=\"img-fluid\"></img>\n          </div>\n          <div className=\"col-sm-6 d-flex flex-column justify-content-center\">\n            <WeatherInput btnclick={(ele) => onLoading(ele)}></WeatherInput>\n          </div>\n        </div>\n      </div>\n      <div className=\"section container text-center\" id=\"2\">\n        <div className=\"row\">\n          <div className=\"col-sm-6 d-flex justify-content-center align-items-center p-5\">\n            {weather_icon_out}\n          </div>\n          <div className=\"col-sm-6\">\n            <div className=\"d-flex justify-content-center p-5\">\n              {weather_out}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}